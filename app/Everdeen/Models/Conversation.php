<?php

namespace Katniss\Everdeen\Models;

use Illuminate\Database\Eloquent\Model;
use Katniss\Everdeen\Utils\ORTC\PushClient;

class Conversation extends Model
{
    const TYPE_MESSAGE = 0;
    const TYPE_MESSAGE_GROUP = 1;
    const TYPE_MESSAGE_ANONYMOUS = 2;

    protected $table = 'conversations';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'user_ids', 'channel', 'type',
    ];

    public function setUserIdsAttribute($users)
    {
        $userIds = [];
        $clientIps = [];
        foreach ($users as $user) {
            if (is_a($user, User::class)) {
                $userIds[] = $user->id;
            } elseif (is_long($user)) {
                $userIds[] = $user;
            } else {
                $clientIps[] = $user;
            }
        }
        sort($userIds);
        sort($clientIps);
        $userIds = array_merge($userIds, $clientIps);
        $this->attributes['user_ids'] = json_encode($userIds);
    }

    public function users()
    {
        return $this->belongsToMany(User::class, 'conversations_users', 'conversation_id', 'user_id');
    }

    public function scopeBetweenUsers($query, User $user_1, User $user_2)
    {
        $userIds = [$user_1->id, $user_2->id];
        sort($userIds);
        return $query->where('type', self::TYPE_MESSAGE)->where('user_ids', json_encode($userIds));
    }

    public function scopeBetweenUserAndAnonymous($query, User $user, $clientIp)
    {
        $userIds = [$user->id, $clientIp];
        return $query->where('type', self::TYPE_MESSAGE_ANONYMOUS)->where('user_ids', json_encode($userIds));
    }

    public static function create(array $attributes = [])
    {
        $attributes['channel'] = PushClient::generateChannelKey(PushClient::PREFIX_CHANNEL_MESSAGE);
        return parent::create($attributes); // TODO: Change the autogenerated stub
    }
}
